{% extends "base.html.jinja" %}

{% block header %}
    <link href="{{ url_for('static', path='css/datatables.css') }}" rel="stylesheet">
{% endblock %}

{% block title %}
{{config.SITE_NAME}} â€” View Submissions
{% endblock %}

{% block content %}
<h1>View Submissions</h1>
<div class="container table-responsive">
    <div class="spinner-border spinner-border-sm loading-circle" role="status"></div>
    <table id="readAllTable" class="table table-hover table-striped table-light" style="display: none;">
        <thead>
            <tr>
                <th>Record</th>
                <th>Form</th>
                <th>Details</th>
                <th>Last Editor</th>
                <th>Last Modified</th>
                <th>Created By</th>
                <th>Created At</th>
            </tr>
        </thead>
        <tbody>
        </tbody>
    </table>
</div>
{% endblock %}

{% block scripts %}
<script src="{{url_for('static', path='js/datatables.js')}}"></script>
<script>
$(document).ready(function () {

    const spinner = document.querySelector('.loading-circle');
    const readAllTable = document.getElementById('readAllTable');
    const apiKey = "{{ request.user.api_key }}";
    const formNames = {{ form_names | tojson }};
    let allFormData = [];


    // https://www.geeksforgeeks.org/how-to-truncate-a-string-in-javascript/
    function GFG(str, maxLength) {
        if (str.length > maxLength) {
            return str.substring(0, maxLength) + '...';
        }
        return str;
    }
    // Wrap the AJAX call in a function that returns a Promise
    function fetchData(formName) {
        return new Promise((resolve, reject) => {
            $.ajax({
                url: `/api/form/read_all/${formName}`,
                type: "GET",
                dataType: 'json',
                beforeSend: function(xhr){xhr.setRequestHeader('X-API-KEY', apiKey);},
                success: function(formData) {
                    resolve(formData.documents);
                },
                error: function(xhr, status, error) {
                    reject(error);
                }
            });
        });
    }

    // Create an array of promises
    let promises = formNames.map(formName => fetchData(formName));

    // Use Promise.all to process data after all AJAX calls are complete
    Promise.all(promises).then(results => {
        results.forEach(documents => {
            allFormData = allFormData.concat(documents);
        });

        // Now process allFormData
        allFormData.forEach(form => {
            let row = `<tr>
                            <td><a href="/ui/form/read_one/${form['metadata']['form_name']}/${form['metadata']['document_id']}">${form['metadata']['document_id']}</a></td>
                            <td>${form['metadata']['form_name'].replace(/_/g, ' ')}</td>
                            <td>${GFG(JSON.stringify(form['data']), 60)}</td>
                            <td>${form['metadata']['last_editor']}</td>
                            <td><span title="${form['metadata']['last_modified']}">${prettifyTimeDiff(form['metadata']['last_modified'])}</span></td>
                            <td>${form['metadata']['created_by']}</td>
                            <td><span title="${form['metadata']['created_at']}">${prettifyTimeDiff(form['metadata']['created_at'])}</span></td>
                        </tr>`;
            $("#readAllTable tbody").append(row);
        });



        spinner.style.display = 'none'; // Hide the spinner
        readAllTable.style.display = ''; // Show the table

        $('#readAllTable').DataTable();

    }).catch(error => {
        console.error("Error fetching data:", error);
        flashMessage("There was an issue fetching results. There may be none to display.", AlertCategories.WARNING);
        spinner.style.display = 'none'; // Hide the spinner
    });
});
</script>

{% endblock %}
