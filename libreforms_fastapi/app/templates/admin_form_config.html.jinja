{% extends "base.html.jinja" %}

{% block title %}
{{config.SITE_NAME}} â€” Edit Form Config
{% endblock %}

{% block header %}
{% endblock %}


{% block content %}
<h1>
    Edit Form Config
    <sup title="This is an admin page">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-star-fill" viewBox="0 0 16 16">
            <path d="M3.612 15.443c-.386.198-.824-.149-.746-.592l.83-4.73L.173 6.765c-.329-.314-.158-.888.283-.95l4.898-.696L7.538.792c.197-.39.73-.39.927 0l2.184 4.327 4.898.696c.441.062.612.636.282.95l-3.522 3.356.83 4.73c.078.443-.36.79-.746.592L8 13.187l-4.389 2.256z"/>
        </svg>
    </sup>
</h1>

{% if config['FORM_CONFIG_EDITS_ENABLED'] %}
<p>Warning: making changes to the form configuration can cause issues in modeling data. Think before you make changes, especially in production. When in doubt, ask another member of your team to review your changes before you publish them here.</p>
{% else %}
<p>

    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-lock" viewBox="0 0 16 16">
        <path d="M8 1a2 2 0 0 1 2 2v4H6V3a2 2 0 0 1 2-2m3 6V3a3 3 0 0 0-6 0v4a2 2 0 0 0-2 2v5a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V9a2 2 0 0 0-2-2M5 8h6a1 1 0 0 1 1 1v5a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1V9a1 1 0 0 1 1-1"/>
    </svg>

    This form configuration is currently locked. You can make further changes to the form config by <a href="{{ url_for( 'ui_admin_form_config_lock' ) }}">unlocking the form</a>.
</p>
{% endif %}

<hr>

<form id="configForm">
    <fieldset class="form-check" style="padding-top: 10px;">
        <label aria-labelledby="configDescription" for="content" class="form-check-label">Form Config</label>
        <span id="configDescription" class="form-text">| Update the form config for the site using this page</span>

        <!-- Monaco editor -->
        <div id="editor" style="height: 500px;"></div>  

    </fieldset>


    <fieldset class="form-check" style="padding-top: 10px;">
        <label aria-labelledby="configDescription" for="content" class="form-check-label">Past Versions</label>
        <span id="configDescription" class="form-text">| Select past versions of this form</span>

        <select id="versionSelector" class="form-select">
            <option value="{{ form_config_str }}">Current Version</option>

            {% for file, time_string, date, old_version_str, addition, subtraction in past_versions %}
            <option 
                value="{{ old_version_str }}"
                title="{{ date }} version has {{addition}} additions and {{subtraction}} subtractions versus the current version">
                {{ date }} ({{ addition }} additions, {{ subtraction }} subtractions)
            </option>
            {% endfor %}
        </select>


    </fieldset>
    {% if config['FORM_CONFIG_EDITS_ENABLED'] %}

    <fieldset style="padding-top: 10px;" class="form-check">
        <button type="submit" class="btn btn-primary" id="updateButton">Update</button>
    </fieldset>
    {% endif %}

</form>




{% endblock %}


{% block scripts %}
<script src="{{ url_for('static', path='js/monaco-editor-0.48.0/min/vs/loader.js') }}"></script>

<script>
require.config({ paths: { 'vs': '{{ url_for("static", path="js/monaco-editor-0.48.0/min/vs") }}' }});

require(['vs/editor/editor.main'], function() {

    // Map site theme to the monaco theme
    function getMonacoTheme() {
        var siteTheme = localStorage.getItem('theme');
        return siteTheme === 'dark' ? 'vs-dark' : 'vs'; 
    }

    var editor = monaco.editor.create(document.getElementById('editor'), {
        value: "{{ form_config_str | replace('\n', '\\n') | replace('\"', '\\\"') | safe }}", 
        language: 'yaml',
        wordWrap: 'on',
        {% if not config['FORM_CONFIG_EDITS_ENABLED'] %}
        readOnly: true,
        {% endif %}
        theme: getMonacoTheme()
    });

    // Listen for theme changes 
    document.addEventListener('themeChanged', function(event) {
        var newTheme = event.detail.theme === 'dark' ? 'vs-dark' : 'vs';
        monaco.editor.setTheme(newTheme);
    });

    // Add event listener to the select element
    document.getElementById('versionSelector').addEventListener('change', function(event) {
        var selectedValue = event.target.value.replace(/\\"/g, '"').replace(/\\n/g, '\n'); // Replace \\" with ", and \\n with actual newlines
        editor.setValue(selectedValue); // Set the selected version as the editor's value
    });

    $('#configForm').submit(function(event) {
        event.preventDefault();
        var formData = {
            "content": editor.getValue() // Get content from Monaco Editor
        };
        console.log(formData);
        var apiKey = "{{ request.user.api_key }}"; 

        $.ajax({
            url: `/api/admin/write_form_config`,
            type: 'POST',
            headers: {
                'X-API-KEY': apiKey,
            },
            data: JSON.stringify(formData),
            contentType: 'application/json; charset=utf-8',
            dataType: 'json',
            success: function(response) {
                flashMessage("Successfully updated form config", "success");
            },
            error: function(xhr) {
                console.error('Operation failed', xhr.responseText);
                flashMessage(xhr.responseText, 'warning');
            }
        });
    });
});
</script>
{% endblock %}
