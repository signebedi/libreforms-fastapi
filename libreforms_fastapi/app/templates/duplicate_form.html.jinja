{% extends "base.html.jinja" %}

{% block title %}
{{ config.SITE_NAME }} â€” Update Form
{% endblock %}

{% block content %}
<h1>Duplicate Form: {{form_name | replace("_", " ") | title}}</h1>

<div class="container">

    <form id="dataForm" method="POST">

        {% for field in form_html %}
            {{ field | safe }}
        {% endfor %}

        <fieldset style="padding-top: 10px;" class="form-check">
            <button type="submit" class="btn btn-primary" id="updateButton">Update</button>
        </fieldset>

    </form>

</div>
{% endblock %}

{% block scripts %}
<script>


$(document).ready(function() {

    var apiKey = "{{ request.user.api_key }}";
    var formName = "{{ form_name }}";
    var documentId = "{{ document_id }}";

    // Fetch existing document data
    function fetchDocumentData() {
        $.ajax({
            url: `/api/form/read_one/${formName}/${documentId}`,
            type: 'GET',
            headers: {
                'X-API-KEY': apiKey,
            },
            dataType: 'json',
            success: populateFormData,
            error: function(xhr) {
                console.error('Failed to fetch document data', xhr.responseText);
            }
        });
    }

    // Populate form fields with fetched data
    function populateFormData(response) {
        const data = response.data;
        for (const key in data) {
            const value = data[key];
            const field = $(`[name="${key}"]`);

            if (Array.isArray(value)) {
                // For checkboxes or multi-selects
                value.forEach(val => {
                    $(`[name="${key}"]`).filter(`[value="${val}"]`).prop('checked', true);
                });
            } else if (typeof value === 'object' && value !== null) {
                // I'm leaving this hear but I don't think we are going to have too many of these
            } else {
                // Handle strings and numbers
                if(field.is(':radio')) {
                    // If the field is a radio button, find the one that matches the value and check it
                    field.filter(`[value="${value}"]`).prop('checked', true);
                } else {
                    // For all other field types, just set the value
                    field.val(value);
                }
            }
        }
    }

    // Call fetchDocumentData on page load
    fetchDocumentData();


    // Initialize Bootstrap tooltips
    $('[data-bs-toggle="tooltip"]').tooltip();


    // Enable the Create button only if there's some data
    function toggleCreateButton() {
        var isFormFilled = $('#dataForm').find('input, textarea, select').filter(function() {
            return $.trim($(this).val()).length > 0;
        }).length > 0;

        $createButton.prop('disabled', !isFormFilled);
    }

    // Check form inputs to toggle the create button
    $('#dataForm').on('keyup change paste', 'input, textarea, select', toggleCreateButton);

    // Form submission event
    $('#dataForm').submit(function(event) {
        event.preventDefault(); // Prevent the form from submitting via the browser


        // Flag to track if the form is valid
        let formIsValid = true;

        // Iterate over each required checkbox group
        $('.required-checkbox-group[data-required="true"]').each(function() {
            const $group = $(this);
            const isChecked = $group.find('input[type="checkbox"]:checked').length > 0;

            if (!isChecked) {
                formIsValid = false;

                // Temporarily show the tooltip
                $group.tooltip('dispose').tooltip({
                    title: "Please select at least one option.",
                    placement: 'right'
                }).tooltip('show');

                // Hide the tooltip after 2 seconds
                setTimeout(function() { $group.tooltip('dispose'); }, 2000);
            }
        });

        // Prevent form submission if validation fails
        if (!formIsValid) {
            event.preventDefault();
            
        } else {
            var formData = {};
            
            // Process all except checkboxes
            $('#dataForm').find('input:not(:checkbox), textarea, select').each(function() {
                formData[this.name] = $(this).val();
            });
            
            // Process checkboxes: group them by name and gather checked values into arrays
            $('#dataForm').find('input:checkbox').each(function() {
                if (!formData.hasOwnProperty(this.name)) {
                    formData[this.name] = [];
                }
                if ($(this).is(':checked')) {
                    formData[this.name].push($(this).val() || true); // Push 'true' if value is unspecified
                }
            });

            // Assuming the user's API key is added in the form as a hidden field or accessible in some other way
            var apiKey = "{{ request.user.api_key }}"; 
            var formName = "{{ form_name }}";

            $.ajax({
                url: `/api/form/create/${formName}`,
                type: 'POST',
                headers: {
                    'X-API-KEY': apiKey,
                },
                data: JSON.stringify(formData),
                contentType: 'application/json; charset=utf-8',
                dataType: 'json',
                success: function(response) {
                    // Redirect to the read_one page with the form_name and document_id from the response
                    setFlashMessage("Successfully updated form submission", AlertCategories.SUCCESS);
                    
                    // We purposefully delay for a second before relocating to the new document
                    setTimeout(function() {
                        window.location.href = `/ui/form/read_one/${formName}/${response.document_id}`;
                    }, 1000);

                },
                error: function(xhr) {
                    // Handle errors, e.g., show an error message
                    console.error('Form creation failed', xhr.responseText);
                    // Implement flashMessage or another way to show errors to the user
                    flashMessage(xhr.responseText, 'warning');
                    
                    // Optionally re-enable the Create button here
                    $createButton.prop('disabled', false);
                }
            });
        }
    });
});




</script>
{% endblock %}
