{% extends "base.html.jinja" %}


{% block title %}
{{config.SITE_NAME}} â€” Create Relationship Type
{% endblock %}

{% block content %}
<h1>
    Create Relationship Type 
    <sup title="This is an admin page">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-star-fill" viewBox="0 0 16 16">
            <path d="M3.612 15.443c-.386.198-.824-.149-.746-.592l.83-4.73L.173 6.765c-.329-.314-.158-.888.283-.95l4.898-.696L7.538.792c.197-.39.73-.39.927 0l2.184 4.327 4.898.696c.441.062.612.636.282.95l-3.522 3.356.83 4.73c.078.443-.36.79-.746.592L8 13.187l-4.389 2.256z"/>
        </svg>
    </sup>
</h1>
<hr>

<form id="relationshipForm">

    <fieldset style="padding-top: 10px;" class="form-check">
        <label aria-labelledby="nameHelpInline" for="name" class="form-check-label">Name</label>
         <span id="nameHelpInline" class="form-text">
        | Give a unique name to your relationship type.
        </span>
        <input type="text" id="name" name="name" class="form-control" required>
    </fieldset>

    <fieldset style="padding-top: 10px;" class="form-check">
        <label aria-labelledby="reciprocalNameHelpInline" for="reciprocalName" class="form-check-label">Reciprocal Name</label>
         <span id="reciprocalNameHelpInline" class="form-text">
        | Optionally, give a name to describe the reciprocal of this relationship. For example, if this field is called "managedBy", then a reciprocal name could be "managerOf".
        </span>
        <input type="text" id="reciprocalName" name="reciprocalName" class="form-control">
    </fieldset>

    <fieldset style="padding-top: 10px;" class="form-check">
        <label aria-labelledby="descriptionHelpInline" for="description" class="form-check-label">Description</label>
         <span id="descriptionHelpInline" class="form-text">
        | Provide a description for this relationship (Max Length: 500 Chars)
        </span>
        <textarea type="text" id="description" name="description" class="form-control" maxlength="500" required></textarea> 
    </fieldset>

    <fieldset style="padding-top: 10px;" class="form-check">
        <div style="padding-bottom: 10px;">
            <label for="exclusiveRelationship">Limit</label>
            <span id="exclusiveRelationshipHelpInline" class="form-text">
                | Do you want to limit users to having one relationship of this type?
            </span>
        </div>
        <div class="form-check form-switch">
            <input class="form-check-input" type="checkbox" name="exclusiveRelationship" id="exclusiveRelationship" value="true" checked="" onchange="updateLabel(this)">
            <label class="form-check-label" for="exclusiveRelationship" id="exclusiveRelationshipStatus">Yes, users should only be able to have one relationship of this type</label>
        </div>
    </fieldset>


    <fieldset style="padding-top: 10px;" class="form-check">
        <button type="submit" class="btn btn-primary" id="createButton">Create</button>
    </fieldset>

</form>

{% endblock %}


{% block scripts %}
<script>

    function updateLabel(checkbox) {
        var label = document.getElementById('exclusiveRelationshipStatus');
        if (checkbox.checked) {
            label.innerHTML = 'Yes, users should only be able to have one relationship of this type';
        } else {
            label.innerHTML = 'No, users only be able to have multiple relationships of this type';
        }
    }


    $(document).ready(function() {

        var apiKey = "{{ request.user.api_key }}"; 

        $('#relationshipForm').on('submit', function(event) {
            event.preventDefault(); // Stop the form from submitting normally

            const createButton = document.getElementById('createButton')
            createButton.disabled=true; 
            createButton.value='Creating...';



            // Prepare form data
            var formData = {
                name: $('#name').val().trim(),
                reciprocal_name: $('#reciprocalName').val().trim(),
                description: $('#description').val().trim(),
                exclusive_relationship: $('#exclusiveRelationship').is(':checked')
            };

            console.log(JSON.stringify(formData));

            // AJAX POST request to the API endpoint
            $.ajax({
                url: '/api/admin/create_relationship_type',
                type: 'POST',
                headers: {
                    'X-API-KEY': apiKey,
                },
                contentType: 'application/json', // Ensure to set the content type
                data: JSON.stringify(formData), // Convert formData to JSON format
                success: function(response) {
                    // Handle success
                    console.log('Relationship created successfully', response);
                    
                    // Stash a flashed success message and redirect
                    setFlashMessage("Relationship created successfully!", "success");
                    window.location.href = '/ui/admin/manage_relationship_types';
                },
                error: function(xhr) {
                    // Handle errors
                    console.error('Relationship creation failed.', xhr.responseText);
                    // Display error message
                    flashMessage(xhr.responseText, AlertCategories.WARNING); 
                }
            });

            // Here we restore the submit button
            createButton.disabled = false;
            createButton.value='Create';

        });


    });
</script>
{% endblock %}