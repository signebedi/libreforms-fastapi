{% extends "base.html.jinja" %}

{% block title %}
{{config.SITE_NAME}} â€” Home
{% endblock %}

{% block header %}
<link href="{{ url_for('static', path='css/datatables.css') }}" rel="stylesheet">
{% endblock %}


{% block content %}
<div class="container table-responsive">

{{ render_markdown_content(config['HOMEPAGE_MESSAGE']) | safe }}


{% if config['RECENT_ACTIVITY_ENABLED'] and request.user.is_authenticated %}

    <h4 style="padding-top: 20px;">Recent Activity</h4>

    <div class="spinner-border spinner-border-sm loading-circle" role="status"></div>
    <table id="readAllTable" class="table table-hover table-striped table-light" style="display: none;">
        <thead>
            <tr>
                <th>Record</th>
                <th>Form</th>
                <th>Last Editor</th>
                <th>Last Modified</th>
                <th>Created By</th>
                <th>Created At</th>
            </tr>
        </thead>
        <tbody>
        </tbody>
    </table>
    <div id="noDataMessage" style="display: none;">There is no recent activity to display</div>

{% endif %}
</div>



{% endblock %}

{% block scripts %}

{% if config['RECENT_ACTIVITY_ENABLED'] and request.user.is_authenticated %}
<script src="{{url_for('static', path='js/datatables.js')}}"></script>
<script>
$(document).ready(function () {

    const spinner = document.querySelector('.loading-circle');
    const readAllTable = document.getElementById('readAllTable');
    const noDataMessage = document.getElementById('noDataMessage');
    const apiKey = "{{ request.user.api_key }}";
    const formNames = {{ form_names | tojson }};
    let allFormData = [];


    // Wrap the AJAX call in a function that returns a Promise
    function fetchData(formName) {
        return new Promise((resolve, reject) => {
            $.ajax({
                url: `/api/form/read_all/${formName}?sort_by_last_edited=true&newest_first=true&newest_first=true&return_when_empty=true`,
                type: "GET",
                dataType: 'json',
                beforeSend: function(xhr){xhr.setRequestHeader('X-API-KEY', apiKey);},
                success: function(formData) {
                    resolve(formData.documents);
                },
                error: function(xhr, status, error) {
                    reject(error);
                }
            });
        });
    }

    // Create an array of promises
    let promises = formNames.map(formName => fetchData(formName));

    // Use Promise.all to process data after all AJAX calls are complete
    Promise.all(promises).then(results => {
        results.forEach(documents => {
            allFormData = allFormData.concat(documents);
        });

        // Now process allFormData
        allFormData.forEach(form => {
            let row = `<tr>
                            <td><a href="/ui/form/read_one/${form['metadata']['form_name']}/${form['metadata']['document_id']}">${form['metadata']['document_id']}</a></td>
                            <td>${form['metadata']['form_name'].replace(/_/g, ' ')}</td>
                            <td>
                                <a target="_blank" href="/ui/auth/p/${form['metadata']['last_editor']}" class="badge bg-primary text-decoration-none" style=" {%if not config['OTHER_PROFILES_ENABLED'] and not request.user.site_admin%} pointer-events: none;{%endif%}" aria-label="Link to ${form['metadata']['last_editor']}">
                                    ${form['metadata']['last_editor']}
                                </a>
                            </td>
                            <td><span title="${form['metadata']['last_modified']}">${prettifyTimeDiff(form['metadata']['last_modified'], "{{config['TIMEZONE']|string}}")}</span></td>
                            <td>
                                <a target="_blank" href="/ui/auth/p/${form['metadata']['created_by']}" class="badge bg-primary text-decoration-none" style=" {%if not config['OTHER_PROFILES_ENABLED'] and not request.user.site_admin%} pointer-events: none;{%endif%}" aria-label="Link to ${form['metadata']['created_by']}">
                                    ${form['metadata']['created_by']}
                                </a>
                            </td>
                            <td><span title="${form['metadata']['created_at']}">${prettifyTimeDiff(form['metadata']['created_at'], "{{config['TIMEZONE']|string}}")}</span></td>
                        </tr>`;
            $("#readAllTable tbody").append(row);
        });



        spinner.style.display = 'none'; // Hide the spinner
        readAllTable.style.display = ''; // Show the table


        $('#readAllTable').DataTable({
            ordering: false,
            // Set column widths below 
            columns: [{ width: '20%' }, { width: '30%' }, { width: '10%' }, { width: '15%' }, { width: '10%' }, { width: '15%' }],
            pageLength: 5,
            lengthChange: false,
            info: false,
            // paging: false,
            searching: false,
            // This is a fix to properly sort prettified datetimes
            columnDefs: [
                { 
                    targets: [3, 5], 
                    render: function(data, type, row) {
                        var date = $(data).attr('title');
                        return type === 'sort' ? date : data; 
                    }
                }
            ]
        });

    }).catch(error => {
        console.error("Error fetching data:", error);
        // flashMessage("There was an issue fetching results. There may be none to display.", AlertCategories.WARNING);
        spinner.style.display = 'none'; // Hide the spinner
        readAllTable.style.display = 'none'; 
        noDataMessage.style.display = ''; 

    });
});
</script>



{% endif %}

{% endblock %}
