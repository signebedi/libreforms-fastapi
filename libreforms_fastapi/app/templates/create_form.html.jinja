{% extends "base.html.jinja" %}

{% block title %}
{{ config.SITE_NAME }} â€” Create Form
{% endblock %}

{% block content %}
                            
{% if (form_name in request.user.permissions and "create" in request.user.permissions[form_name]) or unregistered_form %}

<div class="container">

    <form id="dataForm" method="POST">

        {% for field in form_html %}
            {{ field | safe }}
        {% endfor %}

        <fieldset style="padding-top: 20px; padding-bottom: 15px;" class="form-check">
            <button type="submit" class="btn btn-primary" id="createButton">Submit</button>
        </fieldset>

    </form>

</div>

{% endif %}

{% endblock %}


{% block scripts %}
{% if form_name in request.user.permissions and "create" in request.user.permissions[form_name] or unregistered_form  %}

<script>

{%if unregistered_form%}
var apiKey = "{{ api_key }}"; 

{%else%}
var apiKey = "{{ request.user.api_key }}"; 
{%endif%}


function getLookup(formName, fieldName, el) {

    // Ensure 'el' and selected option are valid ... sometimes, this logic is called
    // before the options are fully buffered. This is a get-out-of-jail-free card.
    if (!el || el.selectedIndex < 0) {
        // console.warn("Element or selected option is not available.");
        return; // Stop execution if 'el' or the selected option is undefined
    }

    // Access the selected option
    var selectedOption = el.options[el.selectedIndex];

    // Get the 'data-hidden' attribute from the selected option
    var documentData = selectedOption.getAttribute('data-hidden');
    var documentId = selectedOption.value;
    // console.log(documentData);
    
    const contentField = document.getElementById(`content_${fieldName}`);

    // Clear previous contents
    contentField.innerHTML = '';

    // Get the pushPopulate data from the data-pushpopulate attribute
    let pushPopulateStr = el.getAttribute('data-pushpopulate');
    
    // Parse pushPopulateStr into an object, defaulting to an empty object if invalid
    let pushPopulate = {};
    try {
        pushPopulate = JSON.parse(pushPopulateStr);
    } catch (error) {
        console.warn("Error parsing pushPopulateStr, defaulting to empty object:", error);
        pushPopulate = {}; // Default to an empty object
    }

    if (documentData) {
        let dataObj;
        try {
            dataObj = JSON.parse(documentData); 
        } catch (error) {
            console.error("Parsing error:", error);
            return; // Stop execution if JSON is invalid.
        }

        const listGroup = document.createElement("div");
        listGroup.className = 'list-group';

        Object.keys(dataObj).forEach(function(key) {
            const listItem = document.createElement("a");
            listItem.className = 'list-group-item list-group-item-action';
            listItem.innerHTML = `<strong>${key}:</strong> ${dataObj[key]}`;
            listGroup.appendChild(listItem);
        });

        contentField.appendChild(listGroup);

        let oldLink = document.getElementById('lookup-link-'+fieldName);
        if (oldLink) {
            oldLink.parentNode.removeChild(oldLink);
        }

        // Create an anchor element with the appropriate href
        let link = document.createElement('a');
        link.href = "/ui/form/read_one/" + formName + "/" + documentId;
        link.innerHTML = "Open Full Record for this Form";
        link.className = "btn btn-primary d-flex justify-content-center my-3";
        link.title = "Click here to view more details about this form.";
        link.target = "_blank";
        link.setAttribute("aria-label", "View full details for this form");
        link.id = 'lookup-link-'+fieldName; // Add this line to set the id

        contentField.parentNode.insertBefore(link, contentField);


        // Now use pushPopulate to set field values
        Object.keys(pushPopulate).forEach(function(currentField) {
            let linkedField = pushPopulate[currentField];

            // Get the corresponding value from dataObj based on linkedField
            let valueFromDataObj = dataObj[linkedField];

            // Find the current field element and set its value
            let currentFieldEl = document.getElementById(currentField);

            if (currentFieldEl && valueFromDataObj !== undefined) {
                currentFieldEl.value = valueFromDataObj;
            }
        });


    }
}

function generateLookup(formName, fieldName, displayFields, queryParams) {

    function fetchData(formName) {
        return new Promise((resolve, reject) => {
            $.ajax({
                url: `/api/form/read_all/${formName}?flatten=true&exclude_journal=true&stringify_output=true&sort_by=%__metadata__last_edited&return_when_empty=true&${queryParams}`,
                type: "GET",
                dataType: 'json',
                beforeSend: function(xhr){xhr.setRequestHeader('X-API-KEY', apiKey);},
                success: function(formData) {
                    resolve(formData.documents);
                },
                error: function(xhr, status, error) {
                    reject(error);
                }
            });
        });
    }

    // Fetch data for the single form
    fetchData(formName).then(documents => {

        // First add an empty option at the top of the list
        $('#' + fieldName).append($('<option>', {
            value: "",
            'data-hidden': "",
            text: "Select an option below"
        }));


        var trimmedData = [];
        // Process documents
        documents.forEach(form => {
            // Initialize an empty string for each form
            let concatenatedFields = '';

            displayFields.forEach(field => {
                if (form[field] !== undefined) {
                    concatenatedFields += form[field] + ', ';
                }
            });

            // Trim the trailing commas and spaces, and add the concatenated string to the trimmedData array
            concatenatedFields = concatenatedFields.replace(/,\s*$/, '');
            trimmedData.push(concatenatedFields);

            // Append each concatenated string as an option to the select element
            $('#' + fieldName).append($('<option>', {
                value: form['__metadata__document_id'],
                'data-hidden': JSON.stringify(form),
                text: concatenatedFields
            }));
        });

        populateFormFromURL();
    
    }).catch(error => {
        console.error("Error fetching data: ", error);
    });


}

$(document).ready(function() {

    // Initialize Bootstrap tooltips
    $('[data-bs-toggle="tooltip"]').tooltip();

    // Set each label correctly
    $('.bool-switch').each(function() {
        $(this).trigger('change');
    });


    // Populate URL params on page load
    populateFormFromURL();

    // Form submission event
    $('#dataForm').submit(function(event) {
        event.preventDefault(); // Prevent the form from submitting via the browser

        // Disable the submit button
        $('#createButton').prop('disabled', true);

        // Flag to track if the form is valid
        let formIsValid = true;

        // Iterate over each required checkbox group
        $('.required-checkbox-group[data-required="true"]').each(function() {
            const $group = $(this);
            const isChecked = $group.find('input[type="checkbox"]:checked').length > 0;

            if (!isChecked) {
                formIsValid = false;

                // Temporarily show the tooltip
                $group.tooltip('dispose').tooltip({
                    title: "Please select at least one option.",
                    placement: 'right'
                }).tooltip('show');

                // Hide the tooltip after 2 seconds
                setTimeout(function() { $group.tooltip('dispose'); }, 2000);
            }
        });

        // Prevent form submission if validation fails
        if (!formIsValid) {

            // Re-enable the submit button
            $('#createButton').prop('disabled', false);
            event.preventDefault();
            
        } else {
            var formData = {};
            
            // Process all except checkboxes
            $('#dataForm').find('input:not(:checkbox), textarea, select').each(function() {
                formData[this.name] = $(this).val();
            });

            
            // Process checkboxes: group them by name and gather checked values into arrays
            $('#dataForm').find('input:checkbox').each(function() {
                if ($(this).hasClass('bool-switch-checkbox')) {
                    // If element has the class 'bool-switch-checkbox', set formData[this.name] to its checked state
                    formData[this.name] = $(this).is(':checked');
                } else {
                    if (!formData.hasOwnProperty(this.name)) {
                        formData[this.name] = [];
                    }
                    if ($(this).is(':checked')) {
                        formData[this.name].push($(this).val() || true); // Push 'true' if value is unspecified
                    }
                }
            });


            $('#dataForm').find('input:radio').each(function() {
                if ($(this).is(':checked')) {
                    formData[this.name] = $(this).val();
                }
            });

            var formName = "{{ form_name }}";

            // console.log(formData);

            $.ajax({
                url: `/api/form/create/${formName}`,
                type: 'POST',
                headers: {
                    'X-API-KEY': apiKey,
                },
                data: JSON.stringify(formData),
                contentType: 'application/json; charset=utf-8',
                dataType: 'json',
                success: function(response) {
                    // Redirect to the read_one page with the form_name and document_id from the response
                    setFlashMessage("Successfully created form submission", AlertCategories.SUCCESS);
                    

                    // We purposefully delay for a second before relocating to the new document
                    // setTimeout(function() {
                    //     window.location.href = `/ui/form/read_one/${formName}/${response.document_id}`;
                    // }, 1000);

                    {%if unregistered_form%}
                    window.location.href = `/ui/home`;

                    {%else%}
                    window.location.href = `/ui/form/read_one/${formName}/${response.document_id}`;
                    {%endif%}

                },
                error: function(xhr) {

                    // Re-enable the submit button
                    $('#createButton').prop('disabled', false);

                    console.error('Form creation failed', xhr.responseText);
                    flashMessage(xhr.responseText, 'warning');
                }
            });
        }
    });


    // Function to update conditional fields visibility
    function updateConditionalFields() {
        // Process all fields with conditional display attributes
        $('[data-conditional-field]').each(function() {
            const $field = $(this);
            const dependentFieldName = $field.data('conditional-field');
            const dependentFieldValue = $field.data('conditional-value');
            let $dependentField = $('#' + dependentFieldName);
            
            if ($dependentField.length) {
                let currentValue;
                
                // Handle different input types correctly
                if ($dependentField.is(':checkbox')) {
                    // For checkboxes, get checked state
                    currentValue = $dependentField.is(':checked').toString();
                } else if ($dependentField.attr('type') === 'radio') {
                    // For radio buttons, get the selected value in the group
                    currentValue = $('input[name="' + dependentFieldName + '"]:checked').val() || '';
                } else {
                    // For other input types (text, select, etc.)
                    currentValue = $dependentField.val();
                }
                
                // Store previous visibility state
                const wasVisible = !$field.hasClass('d-none');
                
                // Show/hide based on condition (convert to strings for comparison)
                if (String(currentValue) === String(dependentFieldValue)) {
                    $field.removeClass('d-none');
                    
                    // Re-enable required attribute on visible fields
                    $field.find('input, select, textarea').each(function() {
                        if ($(this).attr('data-required') === 'true') {
                            $(this).prop('required', true);
                        }
                    });
                } else {
                    // If the field was previously visible but now should be hidden
                    if (wasVisible) {
                        // Reset text inputs and textareas to empty
                        $field.find('input[type="text"], input[type="email"], input[type="number"], input[type="date"], textarea').val('');
                        
                        // Reset all checkboxes to unchecked (default assumption)
                        $field.find('input[type="checkbox"]').prop('checked', false);
                        
                        // For bool_switch inputs, reset and update label
                        $field.find('.bool-switch-checkbox').each(function() {
                            $(this).prop('checked', false);
                            // Find the associated label and update it
                            const $label = $field.find('.bool-switch-label[for="' + $(this).attr('id') + '"]');
                            if ($label.length) {
                                // Extract false_label from onchange attribute 
                                const onchangeAttr = $(this).attr('onchange') || '';
                                const match = onchangeAttr.match(/updateLabel\(this,\s*['"](.+?)['"]\s*,\s*['"](.+?)['"]\s*\)/);
                                if (match && match[2]) {
                                    $label.text(match[2]); // Set to false_label
                                }
                            }
                        });
                        
                        // Reset radio buttons - select first option in each group
                        $field.find('input[type="radio"]:first').prop('checked', true);
                        
                        // Reset select elements to first option
                        $field.find('select').each(function() {
                            const $firstOption = $(this).find('option:first');
                            if ($firstOption.length) {
                                $(this).val($firstOption.val());
                            }
                        });
                    }
                    
                    $field.addClass('d-none');
                    
                    // Remove required attribute from hidden fields
                    $field.find('input, select, textarea').each(function() {
                        if ($(this).attr('data-required') === 'true') {
                            $(this).prop('required', false);
                        }
                    });
                }
            }
        });
    }    
    // Set initial visibility on page load
    updateConditionalFields();
    
    // Update visibility when any form field changes
    $('input, select, textarea').on('change', function() {
        updateConditionalFields();
    });
    
    // Special handling for fields that don't trigger change events naturally
    $('input[type="text"], input[type="number"], textarea').on('input', function() {
        updateConditionalFields();
    });


});


function updateLabel(checkbox, enabledText, disabledText) {
    var label = checkbox.nextElementSibling;
    label.textContent = checkbox.checked ? enabledText : disabledText;
}



// Function to parse URL parameters and populate form fields, including select elements
function populateFormFromURL() {
    // Get the URL parameters
    const urlParams = new URLSearchParams(window.location.search);

    // Log all the URL parameters for debugging
    //console.log("URL Parameters:", Array.from(urlParams.entries()));

    // Iterate through each parameter and match it to the corresponding form field by name
    urlParams.forEach((value, key) => {
        // Find a form field with the matching name
        const field = document.querySelector(`[name="${key}"]`);

        // Log the current key and value being processed
        //console.log(`Processing key: ${key}, value: ${value}`);

        // If the field is found
        if (field) {
            //console.log(`Found field with name: ${key}, tag: ${field.tagName}`);

            if (field.tagName === 'SELECT') {
                // If it's a select element, find the option with the matching value
                const matchingOption = field.querySelector(`option[value="${value}"]`);
                
                if (matchingOption) {
                field.value = value;
                //console.log(`Selected option with value: ${value} in <select>`);
                } else {
                // If no matching option is found, list all available options
                const availableOptions = Array.from(field.options).map(option => option.value);
                //console.warn(`No matching <option> found for value: ${value} in <select>. Available options are:`, availableOptions);
                }
            } else {
                // For other input types, just set the value
                field.value = value;
                //console.log(`Set value: ${value} for field with name: ${key}`);
            }

            // Handle lookup fields
            if (field.classList.contains('data-lookup')) {
                // console.log("The element has the class 'data-lookup'");
                // Execute the onchange function if it exists
                if (typeof field.onchange === 'function') {
                    field.onchange();
                }
            } 
        } else {
            console.warn(`No field found with name: ${key}`);
        }

    });
}

</script>
{% endif %}
{% endblock %}