{% extends "base.html.jinja" %}

{% block title %}
Audio Recorder
{% endblock %}

{% block content %}
<h1>Record Your Audio</h1>
<p>Click "Start Recording" to begin and "Stop Recording" to end. You can then play back and submit your recording for transcription.</p>

<div class="controls">

    <fieldset style="padding-top: 20px;" class="form-group">
        <button title="Start recording" id="startRecording" style="margin-left: 10px;" class="btn btn-outline-primary">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-play-fill" viewBox="0 0 16 16">
                <path d="m11.596 8.697-6.363 3.692c-.54.313-1.233-.066-1.233-.697V4.308c0-.63.692-1.01 1.233-.696l6.363 3.692a.802.802 0 0 1 0 1.393"/>
            </svg>
        </button>
        <button title="Stop recording" id="stopRecording" style="margin-left: 10px;" class="btn btn-outline-danger" disabled>
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-stop-fill" viewBox="0 0 16 16">
                <path d="M5 3.5h6A1.5 1.5 0 0 1 12.5 5v6a1.5 1.5 0 0 1-1.5 1.5H5A1.5 1.5 0 0 1 3.5 11V5A1.5 1.5 0 0 1 5 3.5"/>
            </svg>
        </button>
        <button title="Download recording" style="display: none; margin-left: 10px;" class="btn btn-outline-success">
            <a id="downloadRecording">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-download" viewBox="0 0 16 16">
                    <path d="M.5 9.9a.5.5 0 0 1 .5.5v2.5a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-2.5a.5.5 0 0 1 1 0v2.5a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2v-2.5a.5.5 0 0 1 .5-.5"/>
                    <path d="M7.646 11.854a.5.5 0 0 0 .708 0l3-3a.5.5 0 0 0-.708-.708L8.5 10.293V1.5a.5.5 0 0 0-1 0v8.793L5.354 8.146a.5.5 0 1 0-.708.708z"/>
                </svg>
            </a>
        </button>

        <!-- Audio controls for playback -->
        <audio id="playback" controls style="display:none; margin-top: 20px;"></audio>

    </fieldset>

</div>

<form id="uploadForm" style="display:none;">
    <fieldset style="padding-top: 20px;" class="form-group">
        <button type="submit" class="btn btn-success" id="submitButton">Submit</button>
        <div class="spinner-border spinner-border-sm loading-circle" role="status" style="display: none;"></div>
    </fieldset>
</form>

<div id="statusHeader" class="container mt-5 results-div"></div>
<div id="statusMessage" class="container border rounded mt-5 results-div" style="max-height: 40%; overflow-y: auto;"></div>
{% endblock %}

{% block scripts %}
<script>
document.addEventListener('DOMContentLoaded', function() {
    const startButton = document.getElementById('startRecording');
    const stopButton = document.getElementById('stopRecording');
    const playbackAudio = document.getElementById('playback');
    const uploadForm = document.getElementById('uploadForm');
    const statusMessage = document.getElementById('statusMessage');
    const statusHeader = document.getElementById('statusHeader');
    let mediaRecorder;
    let audioChunks = [];

    startButton.addEventListener('click', () => {
        navigator.mediaDevices.getUserMedia({ audio: true })
            .then(stream => {
                mediaRecorder = new MediaRecorder(stream);
                mediaRecorder.start();
                audioChunks = [];
                startButton.disabled = true;
                stopButton.disabled = false;
                submitButton.disabled = true;
                playbackAudio.style.display = 'none';
                statusHeader.innerHTML = '<h4>Recording...</h4>';

                mediaRecorder.addEventListener('dataavailable', event => {
                    audioChunks.push(event.data);
                });

                // Add headers to the fetch request
                const headers = new Headers({
                    'X-API-KEY': '{{ current_user.api_key }}'
                });

                mediaRecorder.addEventListener('stop', () => {
                    stopButton.disabled = true;
                    submitButton.disabled = false;
                    
                    const audioBlob = new Blob(audioChunks, { type: 'audio/mpeg' });
                    const audioUrl = URL.createObjectURL(audioBlob);
                    playbackAudio.src = audioUrl;
                    playbackAudio.style.display = 'block';
                    uploadForm.style.display = 'block';
                    statusHeader.innerHTML = '<h4>Transcriptions:</h4>';

                    const downloadLink = document.getElementById('downloadRecording');
                    downloadLink.href = audioUrl;
                    downloadLink.download = "recording.mp3";
                    // Append the download link somewhere in your HTML, for example next to the playback audio element
                    // playbackAudio.parentNode.insertBefore(downloadLink, playbackAudio.nextSibling);
                    downloadLink.parentNode.style.display = 'inline-block';


                    // Prepare the form data to be uploaded
                    uploadForm.onsubmit = function(e) {
                        e.preventDefault();

                        const submitButton = document.getElementById('submitButton');
                        const startRecording = document.getElementById('startRecording');
                        const stopRecording = document.getElementById('stopRecording');
                        const spinner = document.querySelector('.loading-circle');
                    
                        submitButton.disabled = true;  // Disable the submit button
                        startRecording.disabled = true;  // Disable the submit button
                        stopRecording.disabled = true;  // Disable the submit button
                        submitButton.innerText = 'Loading...';  // Change submit button text to 'Loading...'
                        spinner.style.display = ''; // Show the spinner
                        statusHeader.innerHTML = '<h4>Transcribing...</h4>';

                        const formData = new FormData();
                        formData.append('audio', audioBlob);
                        fetch('/api/transcribe', { // Ensure this matches your Flask route
                            headers: headers,
                            method: 'POST',
                            body: formData,
                        })
                        .then(response => response.json())
                        .then(data => {
                            // statusMessage.textContent = 'Upload successful!';
                            // Check if the data contains the transcription result
                            statusHeader.innerHTML = '<h4>Transcriptions:</h4>';
                            if (data.content && data.content.full_text_timestamped) {
                                // statusMessage.innerHTML = `<p class="lead mb-3"><span class="badge bg-secondary" id="text-entry" onclick="copyToClipboard(this.parentNode)">Transcription:</span> ${data.content.full_text}</p>`;
                                statusMessage.insertAdjacentHTML("afterbegin", `You: <p class="lead mb-3 msg left">
                                    {% if config['SMTP_ENABLED'] %}
                                    <a title="Email this to yourself" href="#" onclick="sendEmailWithFetch(this.parentNode)">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-send" viewBox="0 0 16 16">
                                            <path d="M15.854.146a.5.5 0 0 1 .11.54l-5.819 14.547a.75.75 0 0 1-1.329.124l-3.178-4.995L.643 7.184a.75.75 0 0 1 .124-1.33L15.314.037a.5.5 0 0 1 .54.11ZM6.636 10.07l2.761 4.338L14.13 2.576zm6.787-8.201L1.591 6.602l4.339 2.76z"/>
                                        </svg>
                                    </a>
                                    {% endif %}
                                    <a title="Copy this text" href="#" onclick="copyToClipboard(this.parentNode)">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-copy" viewBox="0 0 16 16">
                                            <path fill-rule="evenodd" d="M4 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2zm2-1a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1zM2 5a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1v-1h1v1a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h1v1z"/>
                                        </svg>
                                    </a>
                                    ${data.content.full_text}
                                </p>`);
                                statusMessage.style.display = 'block'; // Make sure to display the div if it was hidden
                            } else {
                                statusHeader.innerHTML = 'Transcription failed or no transcription available.';
                                statusMessage.style.display = 'block';
                            }
                            console.log(data); // Handle the response data
                        })
                        .catch(error => {
                            statusHeader.innerHTML = 'Upload failed.';
                            console.error(error);
                        })
                        .finally(() => {
                            submitButton.disabled = false;  // Re-enable the button
                            startRecording.disabled = false;  // Re-enable the button
                            // stopRecording.disabled = false;  // Re-enable the button

                            submitButton.innerText = 'Submit';  // Change button text back to 'Submit'
                            spinner.style.display = 'none'; // Hide the spinner
                        });
                    };
                });
            })
            .catch(error => console.error(error));
    });

    stopButton.addEventListener('click', () => {
        mediaRecorder.stop();
        startButton.disabled = false;
        stopButton.disabled = true;
    });
});


function copyToClipboard(element) {
    // Copying to clipboard
    var text = element.innerText; // Get the text of the entire paragraph
    var elem = document.createElement("textarea");
    document.body.appendChild(elem);
    elem.value = text.trim();
    elem.select();
    document.execCommand("copy");
    document.body.removeChild(elem);

    // Find the badge element (reference ID) within the paragraph
    // var badge = element.querySelector('.badge');

    // Tooltip activation
    var tooltip = new bootstrap.Tooltip(element, {
        title: "Copied!",
        trigger: "manual" 
    });

    tooltip.show(); // Show the tooltip

    // Hide tooltip after 2 seconds
    setTimeout(function() {
        tooltip.hide();
    }, 2000);
}

{% if config['SMTP_ENABLED'] %}

async function sendEmailWithFetch(element) {
    const url = '/api/send_mail';
    const headers = {
        'Content-Type': 'application/json',
        'X-API-KEY': '{{ current_user.api_key }}',
    };
    const emailContent = element.innerText;

    const body = JSON.stringify({
        text: emailContent,
    });

    try {
        const response = await fetch(url, {
            method: 'POST',
            headers: headers,
            body: body,
        });

        if (!response.ok) {
            // If the server response is not ok (HTTP status code in the range 200–299),
            // throw an error with the status
            throw new Error('Network response was not ok. Status: ' + response.status);
        }

        const data = await response.json(); 

        // Tooltip activation
        var tooltip = new bootstrap.Tooltip(element, {
            title: "Sent!",
            trigger: "manual" 
        });

        tooltip.show(); // Show the tooltip

        // Hide tooltip after 2 seconds
        setTimeout(function() {
            tooltip.hide();
        }, 2000);

        console.log(data);
    } catch (error) {
        console.error('There was a problem with your fetch operation:', error);
    }
}
{% endif %}


</script>
{% endblock %}
