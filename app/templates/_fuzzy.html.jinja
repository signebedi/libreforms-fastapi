{% extends "base.html.jinja" %}

{% block title %}
Fuzzy Search
{% endblock %}


{% block content %}
<h1>Fuzzy Search</h1>
<p>Select an author below and search for a string under 100 characters in length. This will return references that best match your query, with a reference number to the left that, when clicked, will copy the text to your clipboard. To the right of each row, you will find a color-coded number (ranging from 0 to 100) designating the match score - the higher the score, the better your query matched the verse. Generally, longer search strings will yield better results.</p>
<form id="gitaForm">

    <fieldset class="form-group">
        <label for="corpus" class="form-label mt-5">Select Corpus:</label>
        <select onchange="fetchAuthors(this)" name="corpus" id="corpus" class="form-select">
            {% for name, shorthand in corpora %}
                <option value="{{ shorthand }}"{% if shorthand == 'gita' %} selected=""{% endif %}>{{ name }}</option>
            {% endfor %}
        </select>
    </fieldset>


    <fieldset class="form-group">
        <label for="author" class="form-label mt-5">Select Author:</label>
        <select name="author" id="author" class="form-select">
            <!-- Options will be populated dynamically -->
        </select>
    </fieldset>
    
    <fieldset class="form-group">
        <label for="query" class="form-label mt-5">Query:</label>
        <input type="text" id="query" maxlength="100" name="query" class="form-control" placeholder="Sword Sever Knowledge Doubt Self Yoga Arise" required>
    </fieldset>

    <fieldset style="padding-top: 20px;" class="form-group">
        <button type="submit" class="btn btn-primary" id="form-button-submit">Submit</button>
        <div class="spinner-border spinner-border-sm loading-circle" role="status" style="display: none;"></div>
    </fieldset>
</form>

<div id="resultContainer" class="container mt-5 results-div"></div>

{% endblock %}



{% block scripts %}
<script>
    document.getElementById('gitaForm').addEventListener('submit', function(e) {
        e.preventDefault();

        const submitButton = document.getElementById('form-button-submit');
        const spinner = document.querySelector('.loading-circle');

        submitButton.disabled = true;  // Disable the submit button
        submitButton.innerText = 'Loading...';  // Change submit button text to 'Loading...'
        spinner.style.display = ''; // Show the spinner

        const corpusName = document.getElementById('corpus').value;
        const authorId = document.getElementById('author').value;
        const query = document.getElementById('query').value;
        const container = document.getElementById('resultContainer');

        // Add headers to the fetch request
        const headers = new Headers({
            'X-API-KEY': '{{ current_user.api_key }}'
        });

        fetch(`/api/${corpusName}/fuzzy?query=${query}&author_id=${authorId}`, { headers: headers })
            .then(response => response.json())
            .then(data => {
                if (data.error) {
                    container.innerHTML = `<p class="text-danger mb-3">${data.error}</p>`;
                } else if (data.content && data.content.text && data.content.ref_list) {
                    // Check if ref_list and text are of the same length
                    if (data.content.text.length === data.content.ref_list.length) {
                        const combinedHtml = data.content.text.map((text, index) => {
                            const ref = data.content.ref_list[index];
                            const score = data.content.match_scores[index];
                            const color = getScoreColor(score);
                            return `<p class="lead mb-3"><span class="badge bg-secondary" id="text-entry" onclick="copyToClipboard(this.parentNode)">${ref}</span> ${text} <sup><span title="${score}/100 similarity score" class="badge badge-outline" style="color: ${color};">${score}</span></sup></p>`;
                        }).join('');
                        container.innerHTML = combinedHtml;
                    } else {
                        container.innerHTML = `<p class="text-muted mb-3">Mismatch in text and query data.</p>`;
                    }
                } else {
                    container.innerHTML = `<p class="text-muted mb-3">No content available.</p>`;
                }
            })
            .catch(error => {
                console.error('Error:', error);
                container.innerHTML = `<p>An error occurred: ${error}</p>`;
            })
            .finally(() => {
                submitButton.disabled = false;  // Re-enable the button
                submitButton.innerText = 'Submit';  // Change button text back to 'Submit'
                spinner.style.display = 'none'; // Hide the spinner
            });
    });


    function getScoreColor(score) {
        if (score <= 35) {
            // Transition from red to orange
            return `rgb(255, ${Math.floor(165 * (score / 35))}, 0)`; // Red to orange
        } else if (score <= 70) {
            // Transition from orange to green
            let normalizedScore = (score - 35) / 35; // Normalize score between 35 and 70
            return `rgb(${255 - Math.floor(255 * normalizedScore)}, ${165 + Math.floor(90 * normalizedScore)}, 0)`; // Orange to green
        } else {
            // Scores above 70 are green
            return 'rgb(0, 255, 0)'; // Solid green
        }
    }

    async function fetchAuthors(selectObject) {

        val = selectObject.value

        let payload = {
            value: val
        };

        let response = await fetch('{{ url_for ('get_authors') }}', {
            method: 'POST',
            headers: {
            'Content-Type': 'application/json;charset=utf-8'
            },
            body: JSON.stringify(payload)
        });
        
        let authors = await response.json();

        // Clear existing options
        let authorsSelect = document.getElementById('author');
        authorsSelect.innerHTML = '';

        // Populate new options
        authors['content'].forEach(author => {
            let option = document.createElement('option');
            option.value = author[0];
            option.textContent = author[1];
            authorsSelect.appendChild(option);
        });
    }

    // Call fetchAuthors on page load for 'gita'
    document.addEventListener('DOMContentLoaded', function() {
        fetchAuthors(document.getElementById('corpus'));
    });


    function copyToClipboard(element) {
        // Copying to clipboard
        var text = element.innerText; // Get the text of the entire paragraph
        var elem = document.createElement("textarea");
        document.body.appendChild(elem);
        elem.value = text;
        elem.select();
        document.execCommand("copy");
        document.body.removeChild(elem);

        // Find the badge element (reference ID) within the paragraph
        var badge = element.querySelector('.badge');

        // Tooltip activation
        var tooltip = new bootstrap.Tooltip(badge, {
            title: "Copied!",
            trigger: "manual" 
        });

        tooltip.show(); // Show the tooltip

        // Hide tooltip after 2 seconds
        setTimeout(function() {
            tooltip.hide();
        }, 2000);
    }


</script>
{% endblock %}
